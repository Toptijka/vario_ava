//based on GyverPWM

#ifndef vario_ava_h
#define vario_ava_h
#include <Arduino.h>
#include <EEPROM.h>

#define CLOCK_DIVIDE
//#define INITIAL_EEPROM

#ifdef CLOCK_DIVIDE
 #define DIV_FACTOR 2
 #define BT_SPEED 115200 //215000 //9600 // 38400
#else
 #define DIV_FACTOR 1
 #define BT_SPEED 57600 //115200 //9600 // 38400
#endif

#define MAX_VOLUME 800
#define MED_VOLUME 400
#define MIN_VOLUME 150

#define adr_buzz_size_array       0*2
#define adr_buzz_up_thres         1*2
#define adr_buzz_down_thres       2*2
#define adr_buzz_up_start_freq    3*2
#define adr_buzz_down_start_freq  4*2
#define adr_buzz_volume           5*2
#define adr_pwdown_time           6*2
#define adr_freq_increment        7*2
#define adr_number_of_flights     8*2
#define adr_battery_alarm_level  11*2
#define adr_display_temp         12*2
#define adr_buzz_always          13*2
#define adr_flight_stop_filter   14*2
#define adr_flight_start_filter  15*2
#define adr_flight_time          16*2
#define adr_total_flight_time    17*2
#define adr_battery_calibration  18*2
#define adr_total_working_time   19*2


#define CORRECT_PWM 1
#define FAST_PWM 0

/*
	Библиотека для расширенной генерации ШИМ на ATmega328 (Arduino UNO/Nano/Pro Mini...)
	Разработчики: Egor Zaharov и AlexGyver
	Версия библиотеки 1.4 от 16.09.2019
*/

// ============== Функции для расширенной генерации ШИМ сигнала ==============

// Данные функции убирают один ШИМ выход у 8-ми битных таймеров, оставляя нам ШИМ пины D3, D5, D9 и D10 на ATmega328

void PWM_frequency(byte pin, long freq, uint8_t correct);
/*	PWM_freqency(пин, частота, режим) - запустить ШИМ с выбранной частотой
	- Пины: D3 (таймер 2), D5 (таймер 0 - сломает millis/delay), D9 и D10 (таймер 1)
	- Режим: 0 (FAST_PWM), 1 (CORRECT_PWM)
	- Частота: 250-200'000 Гц для всех таймеров
	- Для изменения заполнения используй PWM_set
		- Разрядность в этом режиме приведена к 8 битам, на деле шаги изменения разные!
*/

void PWM_resolution(byte pin, byte res, uint8_t correct);
/*	PWM_resolution(пин, разрядность, режим) - запустить ШИМ с выбранной разрядностью
	- Пины: D3 (таймер 2), D5 (таймер 0 - сломает millis/delay), D9 и D10 (таймер 1)
	- Режим: 0 (FAST_PWM), 1 (CORRECT_PWM)
	- Разрешение: D3 (4-8 бит), D5 (4-8 бит), D9 и D10 (4-16 бит)
	- Частота в этом режиме выбирается автоматически максимальная согласно возможностям таймера (см. таблицу)
	- Для изменения заполнения используй PWM_set
		- Пределы заполнения для разной разрядности указаны в таблице
*/

void PWM_set(byte pin, unsigned int duty);
/*	PWM_set(пин, заполнение) - изменить заполнение на выбранном пине
	- Пин: D3, D5, D6, D9, D10, D11
	- Заполнение: зависит от разрешения и режима (см. таблицу)
		- При использовании PWM_frequency разрядность составляет 8 бит (0-255)
		- При использовании PWM_resolution макс. значение заполнения равно (2^разрядность - 1), также смотри таблицу
*/

void PWM_detach(byte pin);		// отключает ШИМ на выбранном пине (позволяет использовать digital Read/Write)
void PWM_attach(byte pin);		// подключает ШИМ на выбранном пине (с последними настройками)
void PWM_default(byte pin);		// сброс настроек соответствующего пину таймера на "стандартные" для Arduino

void PWM_16KHZ_D3(byte duty);
/* 	Запуск ШИМ с частотой 16 кГц на пине D3
	- Отменяет настройки PWM_frequency/PWM_resolution
	- Разрядность приведена к 8 битам (заполнение 0-255)
	- Заполнение меняет сама (не нужно вызывать PWM_set) */

void PWM_20KHZ_D3(byte duty);
/* 	Запуск ШИМ с частотой 20 кГц на пине D3
	- Отменяет настройки PWM_frequency/PWM_resolution
	- Разрядность приведена к 8 битам (заполнение 0-255)
	- Заполнение меняет сама (не нужно вызывать PWM_set) */

void PWM_16KHZ_D5(byte duty);
/* 	Запуск ШИМ с частотой 16 кГц на пине D5
	- Отменяет настройки PWM_frequency/PWM_resolution
	- Разрядность приведена к 8 битам (заполнение 0-255)
	- Заполнение меняет сама (не нужно вызывать PWM_set) */

void PWM_20KHZ_D5(byte duty);
/* 	Запуск ШИМ с частотой 20 кГц на пине D5
	- Отменяет настройки PWM_frequency/PWM_resolution
	- Разрядность приведена к 8 битам (заполнение 0-255)
	- Заполнение меняет сама (не нужно вызывать PWM_set) */

void PWM_16KHZ_D9(int duty);
/* 	Запуск ШИМ с частотой 16 кГц (15.6 кГц) на пине D9
	- Отменяет настройки PWM_frequency/PWM_resolution
	- Разрядность ровно 10 бит (заполнение 0-1023)
	- Заполнение меняет сама (не нужно вызывать PWM_set) */

void PWM_20KHZ_D9(int duty);
/* 	Запуск ШИМ с частотой 20 кГц на пине D9
	- Отменяет настройки PWM_frequency/PWM_resolution
	- Разрядность приведена к 10 битам (заполнение 0-1023)
	- Заполнение меняет сама (не нужно вызывать PWM_set) */

void PWM_16KHZ_D10(int duty);
/* 	Запуск ШИМ с частотой 16 кГц (15.6 кГц) на пине D10
	- Отменяет настройки PWM_frequency/PWM_resolution
	- Разрядность ровно 10 бит (заполнение 0-1023)
	- Заполнение меняет сама (не нужно вызывать PWM_set) */

void PWM_20KHZ_D10(int duty);
/* 	Запуск ШИМ с частотой 20 кГц на пине D10
	- Отменяет настройки PWM_frequency/PWM_resolution
	- Разрядность приведена к 10 битам (заполнение 0-1023)
	- Заполнение меняет сама (не нужно вызывать PWM_set) */
	
float PWM_square_D9(float frequency);
/*	Генератор меандра (квадратная волна) на пине D9
	Частота от 2 Гц до 8 Мгц, шаг частоты зависит от частоты
	(начиная с 0.01 Гц и заканчивая десятками кГц!!!)
	Отключить можно вызвав PWM_detach(9);
	Для сброса таймера в режим по-умолчанию - PWM_default(9);
	Возвращает установленную частоту в герцах!
	
	Частота		Погрешность
	300 Гц		0.01 Гц
	700 Гц		0.05 Гц
	900 ГЦ		0.1 Гц
	2 кГц		0.5 Гц
	3 кГц		1 Гц
	4 кГц		2 Гц
	9 кГц		10 Гц
	20 кГц		50 Гц
	30 кГц		110 Гц
	63 кГц		500 Гц
	90 кГц		1000 Гц
*/

/*
	============= Таблица №1 частот для расширенной генерации ШИМ (PWM_resolution) =============
 _________________________________________________________________________________________________________________________
|Разрядность, бит   |4      |5      |6      |7      |8     |9       |10      |11     |12     |13     |14    |15    |16    |
|___________________|_______|_______|_______|_______|______|________|________|_______|_______|_______|______|______|______|
|Макс. значение duty|15     |31     |63     |127    |255   |511     |1023    |2047   |4095   |8191   |16383 |32767 |65535 |
|___________________|_______|_______|_______|_______|______|________|________|_______|_______|_______|______|______|______|
|Fast   | Пины 3, 5 |1 МГц  |516 кГц|254 кГц|126 кГц|63 кГц|-       |-       |-      |-      |-      |-     |-     |-     |
|PWM    | 9, 10     |1 МГц  |516 кГц|254 кГц|126 кГц|63 кГц|31.2 кГц|15.6 кГц|7.8 кГц|3.9 кГц|1.9 кГц|980 Гц|488 Гц|244 Гц|
|_______|___________|_______|_______|_______|_______|______|________|________|_______|_______|_______|______|______|______|
|Correct| Пины 3, 5 |571 кГц|266 кГц|129 кГц|63 кГц |32 кГц|-       |-       |-      |-      |-      |-     |-     |-     |
|PWM    | 9, 10     |571 кГц|266 кГц|129 кГц|63 кГц |32 кГц|15.7 кГц|7.8 кГц |3.9 кГц|1.9 кГц|976 Гц |488 Гц|244 Гц|122 Гц|
|_______|___________|_______|_______|_______|_______|______|________|________|_______|_______|_______|______|______|______|
*/

// ============ Функции для настройки стандартной генерации ШИМ сигнала (analogWrite) ============

// Данные функции НЕ убирают один ШИМ выход у 8-ми битных таймеров, можно использовать все 6 ШИМ пинов с настроенной частотой! См. таблицу.

void PWM_prescaler(byte pin, byte mode);
/*	PWM_prescaler(пин, режим) - установить предделитель таймера (меняет частоту ШИМ)
	- Пин: D3, D5, D6, D9, D10, D11
	- Режим: 1-7, см. таблицу частот
*/

void PWM_mode(byte pin, uint8_t mode);
/*	PWM_mode(пин, режим) - установить режим генерации ШИМ
	- Пин: D3, D5, D6, D9, D10, D11
	- Режим: 0 - FastPWM, 1 - Phase-correct, см. таблицу частот
*/

void PWM_TMR1_8BIT();	// Установить таймер 1 (ШИМ на D9 и D10) в режим 8 бит. См. таблицу частот

void PWM_TMR1_10BIT();	// Установить таймер 1 (ШИМ на D9 и D10) в режим 10 бит. См. таблицу частот

/*
	========== Таблица №2 частот для стандартной генерации ШИМ (PWM_prescaler) ==========
	
	Timer 0 по умолчанию работает в режиме Fast PWM 
	Timer 1 и 2 по умолчанию работают в режиме Phase-correct
 _______________________________________________________________________________________________
|       | Timer0 (пины 5 и 6) 8 bit | Timer 1 (пины 9 и 10) 10 bit  | Timer2 (пины 3 и 11) 8 bit|
|       | Timer1 (пины 9 и 10) 8 bit|                               |                           |
|       |___________________________|_______________________________|___________________________|
|mode   | Phase-correct | Fast PWM  | Phase-correct     | Fast PWM  | Phase-correct | Fast PWM  |
|_______|_______________|___________|___________________|___________|_______________|___________|
|1      | 31.4 kHz      | 62.5 kHz  | 7.8 kHz           | 15.6 kHz  | 31.4 kHz      | 62.5 kHz  |
|2      | 4 kHz         | 7.8 kHz   | 977 Hz            | 2 kHz     | 4 kHz         | 8 kHz     |
|3      | 490 Hz        | 976 Hz    | 122 Hz            | 244 Hz    | 980 Hz        | 2 kHz     |
|4      | 122 Hz        | 244 Hz    | 30 Hz             | 61 Hz     | 490 Hz        | 980 Hz    |
|5      | 30 Hz         | 61 Hz     | 7.6 Hz            | 15 Hz     | 245 Hz        | 490 Hz    |
|6      | -             | -         | -                 | -         | 122 Hz        | 244 Hz    |
|7      | -             | -         | -                 | -         | 30 Hz         | 60 Hz     |
|_______|_______________|___________|___________________|___________|_______________|___________|
*/


/* **************************** my funcs ********************************** */
void freq_shift_on ();
void freq_shift_off ();
void freq_shift ();
void disable_timer ();
void buzz_end_of_flight(int in_dat);
// void buzz_start_of_flight(int in_dat);
void buzz_pwdown(int in_dat);

const char welcome_message[] PROGMEM = {"\nWelcome to programming mode!\nYou can send the command \"help\"\n"};
const char help_message[] PROGMEM = {"\
In this mode you can set parameters.\n\n\
Version: 1.4\n\
up_freq = log10(vario)*200.0+buzz_up_start_freq\n\
down_freq = buzz_down_start_freq - log10(|vario+100|)*150.0\n\n\
p0 - buzz_size_array (20) [1-100]\n\
p1 - buzz_up_thres, cm/s (20)\n\
p2 - buzz_down_thres, cm/s (-150)\n\
p3 - buzz_up_start_freq, Hz (400)\n\
p4 - buzz_down_start_freq, Hz (300)\n\
p5 - buzz_volume (200) [0-800]\n\
p6 - pwdown_time, min (60)\n\
p7 - freq_increment, (2)\n\
p11 - battery_alarm_level, % (20)\n\
p12 - display_temp (0)\n\
p13 - buzz_always (0)\n\
p14 - flight_stop_filter, s (60)\n\
p15 - flight_start_filter, ms (4000)\n\
p16 - flight_time, min\n\
p17 - total_flight_time, min\n\
p19 - total_working_time, min\n\
Example: \"p0=20\"\n\n\
\"default\": reset to default values\n\n\
\"calibrate\": use this command after fully charging the battery\n\n\
\"report\": report current values\n\n\
\"sleep\": power down\n\n\
\"exit\": exit without save\n\n\
\"save\": save & exit\n"};

const byte moo_message[] PROGMEM = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 95, 95, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 111, 111, 41, 10, 32, 32, 32, 32, 47, 45, 45, 45, 45, 45, 45, 92, 47, 10, 32, 32, 47, 32, 124, 32, 32, 32, 32, 32, 32, 124, 124, 10, 32, 42, 32, 47, 92, 45, 45, 45, 47, 92, 10, 32, 126, 126, 126, 126, 126, 126, 126, 126, 10, 46, 46, 46, 34, 72, 97, 118, 101, 32, 121, 111, 117, 32, 109, 111, 111, 101, 100, 32, 116, 111, 100, 97, 121, 63, 34, 46, 46, 46};
const byte paramoo_message[] PROGMEM = {95, 46, 46, 126, 126, 42, 42, 42, 42, 126, 126, 46, 46, 95, 10, 32, 32, 32, 32, 32, 92, 47, 32, 32, 32, 32, 32, 32, 32, 32, 92, 47, 10, 32, 32, 32, 32, 32, 32, 32, 92, 32, 32, 32, 32, 32, 32, 40, 95, 95, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 92, 32, 32, 32, 32, 40, 45, 32, 45, 41, 10, 32, 32, 32, 42, 45, 45, 45, 44, 45, 45, 45, 45, 45, 45, 92, 47, 10, 32, 32, 32, 32, 32, 32, 32, 32, 124, 32, 32, 32, 32, 32, 32, 124, 124, 10, 32, 32, 32, 32, 32, 32, 32, 47, 92, 45, 45, 45, 47, 92};

const byte flymaster[] PROGMEM = {0, 0, 0, 134, 2, 47, 2, 46, 2, 46, 2, 55, 2, 55, 2, 55, 2, 55, 2, 63, 2, 63, 2, 63, 2, 71, 2, 71, 2, 71, 2, 71, 2, 78, 2, 78, 2, 78, 2, 78, 2, 85, 2, 85, 2, 85, 2, 85, 2, 92, 2, 92, 2, 92, 2, 98, 2, 98, 2, 98, 2, 98, 2, 104, 2, 104, 2, 104, 2, 104, 2, 110, 2, 110, 2, 110, 2, 110, 2, 115, 2, 115, 2, 115, 2, 115, 2, 120, 2, 120, 2, 120, 2, 120, 2, 125, 2, 125, 2, 125, 2, 125, 2, 130, 2, 130, 2, 130, 2, 130, 2, 134, 2, 134, 2, 134, 2, 134, 2, 139, 2, 139, 2, 139, 2, 139, 2, 144, 2, 144, 2, 144, 2, 144, 2, 149, 2, 149, 2, 149, 2, 149, 2, 153, 2, 153, 2, 153, 2, 153, 2, 157, 2, 157, 2, 157, 2, 157, 2, 161, 2, 161, 2, 161, 2, 161, 2, 161, 2, 165, 2, 165, 2, 166, 2, 165, 2, 169, 2, 169, 2, 169, 2, 169, 2, 172, 2, 172, 2, 173, 2, 172, 2, 176, 2, 175, 2, 176, 2, 176, 2, 175, 2, 178, 2, 178, 2, 178, 2, 178, 2, 182, 2, 181, 2, 181, 2, 181, 2, 184, 2, 184, 2, 184, 2, 184, 2, 184, 2, 187, 2, 187, 2, 187, 2, 187, 2, 191, 2, 191, 2, 191, 2, 190, 2, 193, 2, 193, 2, 193, 2, 192, 2, 193, 2, 197, 2, 196, 2, 197, 2, 197, 2, 200, 2, 200, 2, 200, 2, 200, 2, 200, 2, 203, 2, 203, 2, 203, 2, 203, 2, 206, 2, 206, 2, 207, 2, 206, 2, 206, 2, 209, 2, 209, 2, 209, 2, 209, 2, 212, 2, 212, 2, 212, 2, 212, 2, 212, 2, 215, 2, 215, 2, 215, 2, 215, 2, 218, 2, 218, 2, 218, 2, 218, 2, 219, 2, 220, 2, 220, 2, 220, 2, 220, 2, 222, 2, 222, 2, 222, 2, 222, 2, 222, 2, 224, 2, 224, 2, 224, 2, 225, 2, 224, 2, 226, 2, 226, 2, 226, 2, 226, 2, 228, 2, 228, 2, 228, 2, 228, 2, 228, 2, 230, 2, 230, 2, 230, 2, 231, 2, 232, 2, 232, 2, 232, 2, 232, 2, 232, 2, 234, 2, 234, 2, 234, 2, 234, 0, 0, 0, 182, 2, 240, 2, 240, 2, 240, 2, 240, 2, 240, 2, 245, 2, 245, 2, 245, 2, 245, 2, 245, 2, 250, 2, 250, 2, 250, 2, 250, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 21, 3, 21, 3, 21, 3, 21, 3, 22, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 33, 3, 34, 3, 33, 3, 33, 3, 33, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 48, 3, 48, 3, 48, 3, 48, 3, 49, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 61, 3, 61, 3, 61, 3, 61, 3, 62, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 77, 3, 77, 3, 76, 3, 77, 0, 0, 0, 106, 3, 180, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 91, 3, 91, 3, 91, 3, 91, 3, 91, 3, 99, 3, 98, 3, 99, 3, 99, 3, 99, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 111, 3, 111, 3, 111, 3, 111, 3, 111, 3, 117, 3, 117, 3, 117, 3, 117, 3, 117, 3, 117, 3, 123, 3, 123, 3, 123, 3, 123, 3, 123, 3, 128, 3, 128, 3, 128, 3, 128, 3, 129, 3, 128, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 143, 3, 144, 3, 144, 3, 144, 3, 143, 3, 144, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 151, 3, 151, 3, 152, 3, 151, 3, 151, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 159, 3, 159, 3, 159, 3, 159, 3, 159, 0, 0, 0, 100, 3, 159, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 174, 3, 175, 3, 175, 3, 174, 3, 175, 3, 175, 3, 181, 3, 181, 3, 181, 3, 181, 3, 181, 3, 181, 3, 188, 3, 188, 3, 188, 3, 188, 3, 188, 3, 195, 3, 195, 3, 194, 3, 195, 3, 195, 3, 194, 3, 195, 3, 200, 3, 200, 3, 201, 3, 200, 3, 200, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206, 3, 212, 3, 211, 3, 212, 3, 212, 3, 211, 3, 212, 3, 216, 3, 216, 3, 216, 3, 216, 3, 216, 3, 216, 3, 221, 3, 221, 3, 221, 3, 221, 3, 221, 3, 221, 3, 226, 3, 226, 3, 226, 3, 226, 3, 226, 3, 226, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 0, 0, 0, 93, 3, 244, 3, 239, 3, 239, 3, 239, 3, 239, 3, 239, 3, 239, 3, 239, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 254, 3, 254, 3, 254, 3, 254, 3, 254, 3, 254, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 8, 4, 8, 4, 8, 4, 8, 4, 8, 4, 8, 4, 13, 4, 13, 4, 13, 4, 13, 4, 13, 4, 13, 4, 13, 4, 18, 4, 18, 4, 18, 4, 18, 4, 18, 4, 18, 4, 22, 4, 22, 4, 22, 4, 22, 4, 22, 4, 22, 4, 22, 4, 26, 4, 27, 4, 27, 4, 26, 4, 27, 4, 27, 4, 30, 4, 30, 4, 30, 4, 30, 4, 30, 4, 31, 4, 30, 4, 34, 4, 34, 4, 34, 4, 34, 4, 34, 4, 34, 4, 34, 4, 38, 4, 38, 4, 38, 4, 38, 4, 38, 0, 0, 0, 94, 4, 38, 4, 42, 4, 42, 4, 42, 4, 42, 4, 42, 4, 42, 4, 42, 4, 46, 4, 46, 4, 46, 4, 46, 4, 46, 4, 46, 4, 49, 4, 49, 4, 49, 4, 49, 4, 49, 4, 49, 4, 49, 4, 52, 4, 52, 4, 52, 4, 52, 4, 52, 4, 52, 4, 52, 4, 55, 4, 55, 4, 55, 4, 55, 4, 55, 4, 56, 4, 55, 4, 58, 4, 58, 4, 58, 4, 58, 4, 58, 4, 58, 4, 61, 4, 61, 4, 61, 4, 61, 4, 61, 4, 62, 4, 61, 4, 64, 4, 64, 4, 64, 4, 64, 4, 64, 4, 64, 4, 64, 4, 66, 4, 66, 4, 66, 4, 66, 4, 66, 4, 66, 4, 66, 4, 68, 4, 69, 4, 68, 4, 68, 4, 68, 4, 68, 4, 70, 4, 70, 4, 70, 4, 70, 4, 70, 4, 70, 4, 70, 4, 72, 4, 72, 4, 72, 4, 72, 4, 72, 4, 72, 4, 72, 4, 74, 4, 74, 4, 74, 4, 74, 4, 75, 4, 74, 0, 0, 0, 93, 4, 74, 4, 75, 4, 75, 4, 75, 4, 75, 4, 75, 4, 75, 4, 75, 4, 76, 4, 76, 4, 76, 4, 76, 4, 76, 4, 76, 4, 76, 4, 78, 4, 78, 4, 77, 4, 78, 4, 78, 4, 77, 4, 78, 4, 78, 4, 78, 4, 78, 4, 78, 4, 78, 4, 78, 4, 78, 4, 79, 4, 79, 4, 79, 4, 79, 4, 79, 4, 79, 4, 79, 4, 80, 4, 80, 4, 80, 4, 80, 4, 81, 4, 80, 4, 81, 4, 81, 4, 81, 4, 81, 4, 81, 4, 81, 4, 81, 4, 82, 4, 82, 4, 82, 4, 82, 4, 82, 4, 82, 4, 82, 4, 83, 4, 83, 4, 83, 4, 83, 4, 83, 4, 83, 4, 83, 4, 84, 4, 84, 4, 84, 4, 84, 4, 84, 4, 84, 4, 84, 4, 85, 4, 85, 4, 85, 4, 85, 4, 86, 4, 85, 4, 85, 4, 85, 4, 85, 4, 85, 4, 86, 4, 85, 4, 85, 4, 85, 4, 83, 4, 83, 4, 83, 4, 83, 4, 83, 4, 83, 0, 0, 0, 93, 4, 83, 4, 81, 4, 81, 4, 81, 4, 81, 4, 81, 4, 81, 4, 81, 4, 79, 4, 79, 4, 79, 4, 79, 4, 79, 4, 79, 4, 77, 4, 78, 4, 78, 4, 77, 4, 78, 4, 77, 4, 78, 4, 78, 4, 75, 4, 75, 4, 75, 4, 75, 4, 75, 4, 75, 4, 73, 4, 73, 4, 73, 4, 73, 4, 73, 4, 73, 4, 73, 4, 71, 4, 72, 4, 72, 4, 71, 4, 72, 4, 72, 4, 71, 4, 69, 4, 69, 4, 69, 4, 69, 4, 69, 4, 69, 4, 69, 4, 67, 4, 67, 4, 67, 4, 67, 4, 67, 4, 67, 4, 67, 4, 66, 4, 65, 4, 66, 4, 66, 4, 65, 4, 66, 4, 66, 4, 63, 4, 63, 4, 63, 4, 63, 4, 63, 4, 63, 4, 63, 4, 62, 4, 62, 4, 62, 4, 62, 4, 62, 4, 62, 4, 62, 4, 61, 4, 61, 4, 61, 4, 61, 4, 61, 4, 62, 4, 60, 4, 60, 4, 60, 4, 60, 4, 60, 4, 60, 0, 0, 0, 99, 4, 60, 4, 57, 4, 57, 4, 57, 4, 57, 4, 57, 4, 57, 4, 57, 4, 54, 4, 54, 4, 54, 4, 54, 4, 54, 4, 54, 4, 54, 4, 52, 4, 52, 4, 52, 4, 52, 4, 52, 4, 52, 4, 48, 4, 49, 4, 48, 4, 48, 4, 48, 4, 48, 4, 48, 4, 45, 4, 45, 4, 44, 4, 45, 4, 45, 4, 44, 4, 45, 4, 40, 4, 40, 4, 40, 4, 41, 4, 40, 4, 40, 4, 40, 4, 36, 4, 36, 4, 36, 4, 36, 4, 36, 4, 36, 4, 32, 4, 32, 4, 32, 4, 32, 4, 32, 4, 32, 4, 32, 4, 29, 4, 29, 4, 29, 4, 29, 4, 29, 4, 29, 4, 26, 4, 27, 4, 26, 4, 27, 4, 27, 4, 26, 4, 27, 4, 23, 4, 23, 4, 23, 4, 23, 4, 23, 4, 23, 4, 20, 4, 20, 4, 21, 4, 20, 4, 20, 4, 20, 4, 20, 4, 17, 4, 17, 4, 17, 4, 17, 4, 17, 4, 17, 4, 15, 4, 14, 4, 15, 4, 15, 4, 14, 4, 15, 4, 15, 4, 12, 4, 12, 4, 12, 4, 12, 4, 12, 0, 0, 0, 112, 4, 12, 4, 8, 4, 8, 4, 8, 4, 8, 4, 8, 4, 8, 4, 8, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 242, 3, 242, 3, 242, 3, 242, 3, 242, 3, 242, 3, 238, 3, 238, 3, 238, 3, 238, 3, 238, 3, 238, 3, 238, 3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 3, 234, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 224, 3, 221, 3, 221, 3, 221, 3, 221, 3, 221, 3, 221, 3, 218, 3, 218, 3, 218, 3, 218, 3, 218, 3, 218, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 3, 209, 3, 210, 3, 210, 3, 210, 3, 209, 3, 210, 3, 207, 3, 207, 3, 207, 3, 207, 3, 207, 0, 0, 0, 162, 3, 207, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 202, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 185, 3, 185, 3, 185, 3, 185, 3, 185, 3, 185, 3, 180, 3, 180, 3, 180, 3, 180, 3, 180, 3, 180, 3, 176, 3, 176, 3, 176, 3, 176, 3, 176, 3, 176, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 3, 160, 3, 161, 3, 161, 3, 160, 3, 161, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 150, 3, 150, 3, 150, 3, 150, 3, 150, 3, 150, 3, 145, 3, 145, 3, 145, 3, 145, 3, 145, 3, 145, 3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 3, 136, 3, 136, 3, 136, 3, 136, 3, 137, 3, 136, 3, 132, 3, 132, 3, 132, 3, 133, 3, 132, 3, 132, 3, 128, 3, 128, 3, 128, 3, 129, 3, 128, 3, 124, 3, 124, 3, 124, 3, 125, 3, 124, 3, 124, 3, 120, 3, 120, 3, 121, 3, 120, 3, 120, 3, 117, 3, 117, 3, 117, 3, 117, 3, 117, 3, 117, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 114, 3, 111, 3, 111, 3, 111, 3, 111, 3, 111, 3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 93, 3, 93, 3, 92, 3, 93, 3, 93, 3, 88, 3, 88, 3, 88, 3, 88, 3, 89, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 80, 3, 80, 3, 80, 3, 80, 3, 81, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 72, 3, 72, 3, 71, 3, 72, 3, 72, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 48, 3, 48, 3, 48, 3, 49, 3, 48, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 33, 3, 33, 3, 33, 3, 32, 3, 33, 3, 33, 3, 28, 3, 28, 3, 28, 3, 28, 3, 26, 3, 26, 3, 26, 3, 25, 3, 26, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 16, 3, 16, 3, 17, 3, 16, 3, 16, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0, 0};

// const int flymaster[] PROGMEM = {0, 134, 559, 558, 558, 567, 567, 567, 567, 575, 575, 575, 583, 583, 583, 583, 590, 590, 590, 590, 597, 597, 597, 597, 604, 604, 604, 610, 610, 610, 610, 616, 616, 616, 616, 622, 622, 622, 622, 627, 627, 627, 627, 632, 632, 632, 632, 637, 637, 637, 637, 642, 642, 642, 642, 646, 646, 646, 646, 651, 651, 651, 651, 656, 656, 656, 656, 661, 661, 661, 661, 665, 665, 665, 665, 669, 669, 669, 669, 673, 673, 673, 673, 673, 677, 677, 678, 677, 681, 681, 681, 681, 684, 684, 685, 684, 688, 687, 688, 688, 687, 690, 690, 690, 690, 694, 693, 693, 693, 696, 696, 696, 696, 696, 699, 699, 699, 699, 703, 703, 703, 702, 705, 705, 705, 704, 705, 709, 708, 709, 709, 712, 712, 712, 712, 712, 715, 715, 715, 715, 718, 718, 719, 718, 718, 721, 721, 721, 721, 724, 724, 724, 724, 724, 727, 727, 727, 727, 730, 730, 730, 730, 731, 732, 732, 732, 732, 734, 734, 734, 734, 734, 736, 736, 736, 737, 736, 738, 738, 738, 738, 740, 740, 740, 740, 740, 742, 742, 742, 743, 744, 744, 744, 744, 744, 746, 746, 746, 746, 0, 182, 752, 752, 752, 752, 752, 757, 757, 757, 757, 757, 762, 762, 762, 762, 769, 769, 769, 769, 769, 776, 776, 776, 776, 776, 783, 783, 783, 783, 783, 789, 789, 789, 789, 790, 795, 795, 795, 795, 795, 801, 802, 801, 801, 801, 806, 806, 806, 806, 806, 811, 811, 811, 811, 811, 816, 816, 816, 816, 817, 821, 821, 821, 821, 821, 825, 825, 825, 825, 825, 829, 829, 829, 829, 830, 833, 833, 833, 833, 833, 833, 837, 837, 837, 837, 837, 841, 841, 841, 841, 841, 845, 845, 844, 845, 0, 106, 948, 852, 852, 852, 852, 852, 852, 859, 859, 859, 859, 859, 867, 866, 867, 867, 867, 873, 873, 873, 873, 873, 873, 879, 879, 879, 879, 879, 885, 885, 885, 885, 885, 885, 891, 891, 891, 891, 891, 896, 896, 896, 896, 897, 896, 901, 901, 901, 901, 901, 901, 906, 906, 906, 906, 906, 911, 912, 912, 912, 911, 912, 915, 915, 915, 915, 915, 915, 919, 919, 920, 919, 919, 923, 923, 923, 923, 923, 923, 927, 927, 927, 927, 927, 0, 100, 927, 935, 935, 935, 935, 935, 935, 942, 943, 943, 942, 943, 943, 949, 949, 949, 949, 949, 949, 956, 956, 956, 956, 956, 963, 963, 962, 963, 963, 962, 963, 968, 968, 969, 968, 968, 974, 974, 974, 974, 974, 974, 974, 980, 979, 980, 980, 979, 980, 984, 984, 984, 984, 984, 984, 989, 989, 989, 989, 989, 989, 994, 994, 994, 994, 994, 994, 998, 998, 998, 998, 998, 998, 998, 1002, 1002, 1002, 1002, 1002, 0, 93, 1012, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1012, 1012, 1012, 1012, 1012, 1012, 1017, 1017, 1017, 1017, 1017, 1017, 1022, 1022, 1022, 1022, 1022, 1022, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1032, 1032, 1032, 1032, 1032, 1032, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1042, 1042, 1042, 1042, 1042, 1042, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1050, 1051, 1051, 1050, 1051, 1051, 1054, 1054, 1054, 1054, 1054, 1055, 1054, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1062, 1062, 1062, 1062, 1062, 0, 94, 1062, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1070, 1070, 1070, 1070, 1070, 1070, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1079, 1079, 1079, 1079, 1079, 1080, 1079, 1082, 1082, 1082, 1082, 1082, 1082, 1085, 1085, 1085, 1085, 1085, 1086, 1085, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1092, 1093, 1092, 1092, 1092, 1092, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1098, 1098, 1098, 1098, 1099, 1098, 0, 93, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1102, 1102, 1101, 1102, 1102, 1101, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1104, 1104, 1104, 1104, 1105, 1104, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1109, 1109, 1109, 1109, 1110, 1109, 1109, 1109, 1109, 1109, 1110, 1109, 1109, 1109, 1107, 1107, 1107, 1107, 1107, 1107, 0, 93, 1107, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1103, 1103, 1103, 1103, 1103, 1103, 1101, 1102, 1102, 1101, 1102, 1101, 1102, 1102, 1099, 1099, 1099, 1099, 1099, 1099, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1095, 1096, 1096, 1095, 1096, 1096, 1095, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1090, 1089, 1090, 1090, 1089, 1090, 1090, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1085, 1085, 1085, 1085, 1085, 1086, 1084, 1084, 1084, 1084, 1084, 1084, 0, 99, 1084, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1076, 1076, 1076, 1076, 1076, 1076, 1072, 1073, 1072, 1072, 1072, 1072, 1072, 1069, 1069, 1068, 1069, 1069, 1068, 1069, 1064, 1064, 1064, 1065, 1064, 1064, 1064, 1060, 1060, 1060, 1060, 1060, 1060, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1053, 1053, 1053, 1053, 1053, 1053, 1050, 1051, 1050, 1051, 1051, 1050, 1051, 1047, 1047, 1047, 1047, 1047, 1047, 1044, 1044, 1045, 1044, 1044, 1044, 1044, 1041, 1041, 1041, 1041, 1041, 1041, 1039, 1038, 1039, 1039, 1038, 1039, 1039, 1036, 1036, 1036, 1036, 1036, 0, 112, 1036, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1029, 1028, 1028, 1028, 1028, 1028, 1023, 1023, 1023, 1023, 1023, 1023, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1014, 1014, 1014, 1014, 1014, 1014, 1010, 1010, 1010, 1010, 1010, 1010, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1002, 1002, 1002, 1002, 1002, 1002, 998, 998, 998, 998, 998, 998, 995, 995, 995, 995, 995, 995, 992, 992, 992, 992, 992, 992, 992, 989, 989, 989, 989, 989, 989, 986, 986, 986, 986, 986, 986, 983, 983, 983, 983, 983, 983, 980, 980, 980, 980, 980, 980, 977, 978, 978, 978, 977, 978, 975, 975, 975, 975, 975, 0, 162, 975, 969, 969, 969, 969, 969, 970, 963, 963, 963, 963, 963, 963, 958, 958, 958, 958, 958, 958, 953, 953, 953, 953, 953, 953, 948, 948, 948, 948, 948, 948, 944, 944, 944, 944, 944, 944, 940, 940, 940, 940, 940, 940, 934, 934, 934, 934, 934, 934, 928, 929, 929, 928, 929, 923, 923, 923, 923, 923, 923, 918, 918, 918, 918, 918, 918, 913, 913, 913, 913, 913, 913, 908, 908, 908, 908, 908, 904, 904, 904, 904, 905, 904, 900, 900, 900, 901, 900, 900, 896, 896, 896, 897, 896, 892, 892, 892, 893, 892, 892, 888, 888, 889, 888, 888, 885, 885, 885, 885, 885, 885, 882, 882, 882, 882, 882, 882, 879, 879, 879, 879, 879, 876, 876, 876, 876, 876, 873, 873, 873, 873, 873, 873, 868, 868, 868, 868, 868, 864, 864, 864, 864, 864, 864, 861, 861, 860, 861, 861, 856, 856, 856, 856, 857, 852, 852, 852, 852, 852, 852, 848, 848, 848, 848, 849, 845, 845, 845, 845, 845, 842, 842, 842, 842, 842, 842, 840, 840, 839, 840, 840, 836, 836, 836, 836, 836, 833, 833, 833, 833, 833, 830, 830, 830, 830, 830, 827, 827, 827, 827, 827, 827, 825, 825, 825, 825, 825, 823, 823, 823, 823, 823, 821, 821, 821, 821, 821, 816, 816, 816, 817, 816, 812, 812, 812, 812, 812, 808, 808, 808, 808, 808, 804, 804, 804, 804, 804, 801, 801, 801, 800, 801, 801, 796, 796, 796, 796, 794, 794, 794, 793, 794, 790, 790, 790, 790, 790, 787, 787, 787, 787, 787, 784, 784, 785, 784, 784, 781, 781, 781, 781, 781, 778, 778, 778, 778, 778, 776, 776, 776, 776, 776, 774, 774, 774, 774, 774, 772, 772, 772, 772, 772, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770, 770};


/* ********************************************************** */

extern bool flight;
extern int battery_tr_pin;
extern float batt_average;
extern int battery_pin;

extern int buzz_size_array;
extern int buzz_up_thres;
extern int buzz_down_thres;
extern int buzz_up_start_freq;
extern int buzz_down_start_freq;
extern int buzz_volume;
extern unsigned int pwdown_time;
extern int freq_increment;
// extern int ;
// extern int ;
// extern int ;
// extern int ;
extern int battery_alarm_level;
extern int display_temp;
extern int buzz_always;
extern int flight_total;
extern int flight_last;
// extern int ;
extern int flight_time;
extern unsigned int total_flight_time;
extern unsigned int number_of_flights;
extern unsigned int flight_stop_filter;
extern unsigned int flight_start_filter;
extern int battery_calibration;
extern unsigned int working_time, total_working_time;
extern volatile unsigned int update_freq;
extern volatile int fshift;

void update_int(int addr, int val);
void update_params();
int read_int(int addr);
void read_params();
void default_params();
void freq_shift_on();
void freq_shift_off();

/* ********************************************************** */

float read_voltage();
// void wait(int del);

#endif


